import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Solution {

	static int T, H, W, N;
	static char[][] map;

	// 좌 우 상 하 방향 ㅎㅎㅎ
	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };
	static int posX, posY;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		T = Integer.parseInt(br.readLine());
		for (int t = 1; t <= T; t++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			H = Integer.parseInt(st.nextToken());
			W = Integer.parseInt(st.nextToken());
			map = new char[H][W];

			for (int i = 0; i < H; i++) {
				map[i] = br.readLine().toCharArray();
				for (int j = 0; j < W; j++) {
					switch (map[i][j]) {
					case '<':
					case '>':
					case '^':
					case 'v':
						posY = i;
						posX = j;
						break;
					}
				}
			}

			N = Integer.parseInt(br.readLine());
			String input = br.readLine();

			for (int i = 0; i < N; i++) {
				char c = input.charAt(i);
				switch (c) {
				case 'S':
					shoot();
					break;
				case 'L':
					map[posY][posX] = '<';
					move(0);
					break;
				case 'R':
					map[posY][posX] = '>';
					move(1);
					break;
				case 'U':
					map[posY][posX] = '^';
					move(2);
					break;
				case 'D':
					map[posY][posX] = 'v';
					move(3);
					break;
				}
			}
			System.out.print("#" + t + " ");
			for (int i = 0; i < H; i++) {
				for (int j = 0; j < W; j++) {
					System.out.print(map[i][j]);
				}
				System.out.println();
			}
		}
	}

	static void shoot() {
		int dir = 0;
		switch (map[posY][posX]) {
		case '<':
			dir = 0;
			break;
		case '>':
			dir = 1;
			break;
		case '^':
			dir = 2;
			break;
		case 'v':
			dir = 3;
			break;
		}
		int ny = posY;
		int nx = posX;
		while (true) {
			
			ny += dy[dir];
			nx += dx[dir];
		
			if (ny < 0 || ny >= H || nx < 0 || nx >= W)
				return;
			if (map[ny][nx] == '#')
				return;

			if (map[ny][nx] == '*') {
				map[ny][nx] = '.';
				return;
			}

		}
	}

	static void move(int dir) {

		int ny = posY + dy[dir];
		int nx = posX + dx[dir];
		if (ny < 0 || ny >= H || nx < 0 || nx >= W) return;
		if (map[ny][nx] == '.') {
			map[ny][nx] = map[posY][posX];
			map[posY][posX] = '.';
			posY = ny;
			posX = nx;
		}

	}
}
